{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8c7a168c",
   "metadata": {},
   "outputs": [],
   "source": [
    "## This is a dataset that compiles NBA statsitics fir the 2014-2022 seasons. I compiled 2 documents in one and uploaded it to Jupyter Noteboosk used Vlookup excel funtion to get the names of the teams. \n",
    "## The header includes: Home Team /\tAway Team /\tHOME_TEAM_WINS\t/ Percent of Team's / Points_home /\tField Goal Percentage_home\t/ Free Throw Percentage_home\t/ 3 Point Field Goal Percentage_home\t/ Percent of Team's Assists_home\t/ Rebounds_home\t/ TEAM_ID_away\t/ Percent of Team's Points_Visitor\t/ Field Goal Percentage_Visitor\t/ Free Throw Percentage_Visitor\t/  3 Point Field Goal Percentage_Visitor /\tPercent of Team's Assists_Visitor\t/ Rebounds_Visitor . the dataset includes 26651 rows excluding the header. \n",
    "## Using research, I also addeda column  in the teams document to identify if each team is located in the Eastern or Western Conference, and used Vlookup to merge the data to the Teams document. This would enable me to add mapping visualization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d7555de2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>GAME_DATE_EST</th>\n",
       "      <th>HOME_TEAM_ID</th>\n",
       "      <th>VISITOR_TEAM_ID</th>\n",
       "      <th>SEASON</th>\n",
       "      <th>Home Team</th>\n",
       "      <th>City_home</th>\n",
       "      <th>Geographic conference_home</th>\n",
       "      <th>Visitor Team</th>\n",
       "      <th>City_Visitor</th>\n",
       "      <th>Geographic conference_Visitor</th>\n",
       "      <th>...</th>\n",
       "      <th>3 Point Field Goal Percentage_home</th>\n",
       "      <th>Percent of Team's Assists_home</th>\n",
       "      <th>Rebounds_Visitor</th>\n",
       "      <th>Percent of Team's Points_Visitor</th>\n",
       "      <th>Field Goal Percentage_Visitor</th>\n",
       "      <th>Free Throw Percentage_Visitor</th>\n",
       "      <th>3 Point Field Goal Percentage_Visitor</th>\n",
       "      <th>Percent of Team's Assists_Visitor</th>\n",
       "      <th>Rebounds_Visitor.1</th>\n",
       "      <th>HOME_TEAM_WINS.1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12/22/2022</td>\n",
       "      <td>1610612740</td>\n",
       "      <td>1610612759</td>\n",
       "      <td>2022</td>\n",
       "      <td>Pelicans</td>\n",
       "      <td>New Orleans</td>\n",
       "      <td>Western</td>\n",
       "      <td>Spurs</td>\n",
       "      <td>San Antonio</td>\n",
       "      <td>Western</td>\n",
       "      <td>...</td>\n",
       "      <td>0.382</td>\n",
       "      <td>25.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>0.478</td>\n",
       "      <td>0.815</td>\n",
       "      <td>0.321</td>\n",
       "      <td>23.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12/22/2022</td>\n",
       "      <td>1610612762</td>\n",
       "      <td>1610612764</td>\n",
       "      <td>2022</td>\n",
       "      <td>Jazz</td>\n",
       "      <td>Utah</td>\n",
       "      <td>Western</td>\n",
       "      <td>Wizards</td>\n",
       "      <td>Washington</td>\n",
       "      <td>Eastern</td>\n",
       "      <td>...</td>\n",
       "      <td>0.457</td>\n",
       "      <td>16.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>112.0</td>\n",
       "      <td>0.561</td>\n",
       "      <td>0.765</td>\n",
       "      <td>0.333</td>\n",
       "      <td>20.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12/21/2022</td>\n",
       "      <td>1610612739</td>\n",
       "      <td>1610612749</td>\n",
       "      <td>2022</td>\n",
       "      <td>Cavaliers</td>\n",
       "      <td>Cleveland</td>\n",
       "      <td>Eastern</td>\n",
       "      <td>Bucks</td>\n",
       "      <td>Milwaukee</td>\n",
       "      <td>Western</td>\n",
       "      <td>...</td>\n",
       "      <td>0.313</td>\n",
       "      <td>22.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>106.0</td>\n",
       "      <td>0.470</td>\n",
       "      <td>0.682</td>\n",
       "      <td>0.433</td>\n",
       "      <td>20.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12/21/2022</td>\n",
       "      <td>1610612755</td>\n",
       "      <td>1610612765</td>\n",
       "      <td>2022</td>\n",
       "      <td>76ers</td>\n",
       "      <td>Philadelphia</td>\n",
       "      <td>Eastern</td>\n",
       "      <td>Pistons</td>\n",
       "      <td>Detroit</td>\n",
       "      <td>Eastern</td>\n",
       "      <td>...</td>\n",
       "      <td>0.297</td>\n",
       "      <td>27.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>0.392</td>\n",
       "      <td>0.735</td>\n",
       "      <td>0.261</td>\n",
       "      <td>15.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12/21/2022</td>\n",
       "      <td>1610612737</td>\n",
       "      <td>1610612741</td>\n",
       "      <td>2022</td>\n",
       "      <td>Hawks</td>\n",
       "      <td>Atlanta</td>\n",
       "      <td>Eastern</td>\n",
       "      <td>Bulls</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>Eastern</td>\n",
       "      <td>...</td>\n",
       "      <td>0.378</td>\n",
       "      <td>22.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.773</td>\n",
       "      <td>0.292</td>\n",
       "      <td>20.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  GAME_DATE_EST  HOME_TEAM_ID  VISITOR_TEAM_ID  SEASON  Home Team  \\\n",
       "0    12/22/2022    1610612740       1610612759    2022   Pelicans   \n",
       "1    12/22/2022    1610612762       1610612764    2022       Jazz   \n",
       "2    12/21/2022    1610612739       1610612749    2022  Cavaliers   \n",
       "3    12/21/2022    1610612755       1610612765    2022      76ers   \n",
       "4    12/21/2022    1610612737       1610612741    2022      Hawks   \n",
       "\n",
       "      City_home Geographic conference_home Visitor Team City_Visitor  \\\n",
       "0   New Orleans                    Western        Spurs  San Antonio   \n",
       "1          Utah                    Western      Wizards   Washington   \n",
       "2     Cleveland                    Eastern        Bucks    Milwaukee   \n",
       "3  Philadelphia                    Eastern      Pistons      Detroit   \n",
       "4       Atlanta                    Eastern        Bulls      Chicago   \n",
       "\n",
       "  Geographic conference_Visitor  ...   3 Point Field Goal Percentage_home  \\\n",
       "0                       Western  ...                                0.382   \n",
       "1                       Eastern  ...                                0.457   \n",
       "2                       Western  ...                                0.313   \n",
       "3                       Eastern  ...                                0.297   \n",
       "4                       Eastern  ...                                0.378   \n",
       "\n",
       "   Percent of Team's Assists_home  Rebounds_Visitor  \\\n",
       "0                            25.0              46.0   \n",
       "1                            16.0              40.0   \n",
       "2                            22.0              37.0   \n",
       "3                            27.0              49.0   \n",
       "4                            22.0              47.0   \n",
       "\n",
       "   Percent of Team's Points_Visitor  Field Goal Percentage_Visitor  \\\n",
       "0                             117.0                          0.478   \n",
       "1                             112.0                          0.561   \n",
       "2                             106.0                          0.470   \n",
       "3                              93.0                          0.392   \n",
       "4                             110.0                          0.500   \n",
       "\n",
       "   Free Throw Percentage_Visitor   3 Point Field Goal Percentage_Visitor  \\\n",
       "0                          0.815                                   0.321   \n",
       "1                          0.765                                   0.333   \n",
       "2                          0.682                                   0.433   \n",
       "3                          0.735                                   0.261   \n",
       "4                          0.773                                   0.292   \n",
       "\n",
       "   Percent of Team's Assists_Visitor  Rebounds_Visitor.1  HOME_TEAM_WINS.1  \n",
       "0                               23.0                44.0                 1  \n",
       "1                               20.0                37.0                 1  \n",
       "2                               20.0                46.0                 1  \n",
       "3                               15.0                46.0                 1  \n",
       "4                               20.0                47.0                 0  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Define the file path\n",
    "file_path = r\"C:\\Users\\sr48\\OneDrive - American University of Beirut\\Desktop\\Courses\\MSBA 325\\Assignment 2\\Games.csv\"\n",
    "\n",
    "# Load the CSV file into a Pandas DataFrame\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "# Display the first few rows of the DataFrame to verify the import\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bfcaf299",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-09-24 16:15:28.414 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\sr48\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import streamlit as st\n",
    "\n",
    "# Load your CSV data into a DataFrame (adjust the file path)\n",
    "file_path = r\"C:\\Users\\sr48\\OneDrive - American University of Beirut\\Desktop\\Courses\\MSBA 325\\Assignment 2\\Games.csv\"\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "# Create a Streamlit app\n",
    "st.title(\"NBA Home Team Wins and Losses\")\n",
    "\n",
    "# Create a dropdown to select the Home Team\n",
    "selected_team = st.selectbox(\"Select Home Team\", df['Home Team'].unique(), key=\"home_team_select\")\n",
    "\n",
    "\n",
    "# Create a button to trigger the analysis\n",
    "if st.button(\"Show Wins and Losses\"):\n",
    "    # Filter the DataFrame based on the selected Home Team\n",
    "    filtered_df = df[df['Home Team'] == selected_team]\n",
    "\n",
    "    # Calculate the number of wins (1) and losses (0)\n",
    "    num_wins = filtered_df['HOME_TEAM_WINS'].sum()\n",
    "    num_losses = len(filtered_df) - num_wins\n",
    "\n",
    "    # Display the results\n",
    "    st.write(f\"Team: {selected_team}\")\n",
    "    st.write(f\"Number of Wins: {num_wins}\")\n",
    "    st.write(f\"Number of Losses: {num_losses}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0211c10c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import streamlit as st\n",
    "import plotly.express as px\n",
    "\n",
    "# Load your CSV data into a DataFrame (adjust the file path)\n",
    "file_path = r\"C:\\Users\\sr48\\OneDrive - American University of Beirut\\Desktop\\Courses\\MSBA 325\\Assignment 2\\Games.csv\"\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "# Create a Streamlit app\n",
    "st.title(\"NBA Home Team Wins and Geographic Distribution\")\n",
    "\n",
    "# Create a dropdown to select the Home Team\n",
    "selected_team = st.selectbox(\"Select Home Team\", df['Home Team'].unique(), key=\"home_team_select\")\n",
    "\n",
    "# Create a button to trigger the analysis\n",
    "if st.button(\"Show Wins and Geographic Distribution\"):\n",
    "    # Filter the DataFrame based on the selected Home Team and wins\n",
    "    filtered_df = df[(df['Home Team'] == selected_team) & (df['HOME_TEAM_WINS'] == 1)]\n",
    "\n",
    "    # Calculate the number of wins for each geographic conference\n",
    "    win_distribution = filtered_df['Geographic conference_home'].value_counts()\n",
    "\n",
    "    # Create a pie chart\n",
    "    fig = px.pie(win_distribution, values=win_distribution.values, names=win_distribution.index, title=f\"Geographic Distribution of Home Wins for {selected_team}\")\n",
    "    \n",
    "    # Display the pie chart\n",
    "    st.plotly_chart(fig)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cece5b27",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\sr48\\AppData\\Local\\Temp\\ipykernel_13440\\3483072087.py:5: UserWarning: \n",
      "The dash_core_components package is deprecated. Please replace\n",
      "`import dash_core_components as dcc` with `from dash import dcc`\n",
      "  import dash_core_components as dcc\n",
      "C:\\Users\\sr48\\AppData\\Local\\Temp\\ipykernel_13440\\3483072087.py:6: UserWarning: \n",
      "The dash_html_components package is deprecated. Please replace\n",
      "`import dash_html_components as html` with `from dash import html`\n",
      "  import dash_html_components as html\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8050/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x27010983d90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as go\n",
    "import dash\n",
    "import dash_core_components as dcc\n",
    "import dash_html_components as html\n",
    "from dash.dependencies import Input, Output\n",
    "\n",
    "# Load your data into a pandas DataFrame (replace 'your_data.csv' with your actual data source)\n",
    "# df = pd.read_csv('your_data.csv')\n",
    "\n",
    "# Create a Dash web application\n",
    "app = dash.Dash(__name__)\n",
    "\n",
    "# Define the layout of the web application\n",
    "app.layout = html.Div([\n",
    "    html.H1(\"Home Team Wins Pie Chart\"),\n",
    "    dcc.Dropdown(\n",
    "        id='team-dropdown',\n",
    "        options=[{'label': team, 'value': team} for team in df['Home Team'].unique()],\n",
    "        value=df['Home Team'].unique()[0]  # Set the initial value to the first unique team\n",
    "    ),\n",
    "    dcc.Graph(id='pie-chart')\n",
    "])\n",
    "\n",
    "# Define a callback function to update the pie chart based on the selected team\n",
    "@app.callback(\n",
    "    Output('pie-chart', 'figure'),\n",
    "    [Input('team-dropdown', 'value')]\n",
    ")\n",
    "def update_pie_chart(selected_team):\n",
    "    filtered_df = df[df['Home Team'] == selected_team]\n",
    "    win_count = filtered_df['HOME_TEAM_WINS'].sum()\n",
    "    loss_count = len(filtered_df) - win_count\n",
    "\n",
    "    # Create the pie chart\n",
    "    fig = go.Figure(data=[go.Pie(labels=['Wins', 'Losses'], values=[win_count, loss_count])])\n",
    "    fig.update_layout(title=f'Wins vs. Losses for {selected_team}')\n",
    "\n",
    "    return fig\n",
    "\n",
    "# Run the web application\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7145daac",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "All arrays must be of the same length",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_13440\\24802104.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     16\u001b[0m }\n\u001b[0;32m     17\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 18\u001b[1;33m \u001b[0mdf\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     19\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     20\u001b[0m \u001b[0mapp\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdash\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mDash\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0m__name__\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, data, index, columns, dtype, copy)\u001b[0m\n\u001b[0;32m    634\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    635\u001b[0m             \u001b[1;31m# GH#38939 de facto copy defaults to False only in non-dict cases\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 636\u001b[1;33m             \u001b[0mmgr\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdict_to_mgr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtyp\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mmanager\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    637\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mma\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mMaskedArray\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    638\u001b[0m             \u001b[1;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mma\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmrecords\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mmrecords\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals\\construction.py\u001b[0m in \u001b[0;36mdict_to_mgr\u001b[1;34m(data, index, columns, dtype, typ, copy)\u001b[0m\n\u001b[0;32m    500\u001b[0m         \u001b[1;31m# TODO: can we get rid of the dt64tz special case above?\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    501\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 502\u001b[1;33m     \u001b[1;32mreturn\u001b[0m \u001b[0marrays_to_mgr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtyp\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mtyp\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mconsolidate\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    503\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    504\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals\\construction.py\u001b[0m in \u001b[0;36marrays_to_mgr\u001b[1;34m(arrays, columns, index, dtype, verify_integrity, typ, consolidate)\u001b[0m\n\u001b[0;32m    118\u001b[0m         \u001b[1;31m# figure out the index, if necessary\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    119\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mindex\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 120\u001b[1;33m             \u001b[0mindex\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m_extract_index\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    121\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    122\u001b[0m             \u001b[0mindex\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mensure_index\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals\\construction.py\u001b[0m in \u001b[0;36m_extract_index\u001b[1;34m(data)\u001b[0m\n\u001b[0;32m    672\u001b[0m             \u001b[0mlengths\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mset\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mraw_lengths\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    673\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlengths\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m>\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 674\u001b[1;33m                 \u001b[1;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"All arrays must be of the same length\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    675\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    676\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mhave_dicts\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: All arrays must be of the same length"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "import dash\n",
    "import dash_core_components as dcc\n",
    "import dash_html_components as html\n",
    "from dash.dependencies import Input, Output\n",
    "\n",
    "# Sample data (replace this with your actual data)\n",
    "data = {\n",
    "    'Home Team': [\n",
    "        'Hawks', 'Celtics', 'Pelicans', 'Bulls', 'Mavericks', 'Nuggets', 'Rockets', 'Clippers', 'Lakers', 'Heat',\n",
    "        'Bucks', 'Timberwolves', 'Nets', 'Knicks', 'Magic', 'Pacers', '76ers', 'Suns', 'Trail Blazers', 'Kings',\n",
    "        'Spurs', 'Thunder', 'Raptors', 'Jazz', 'Grizzlies', 'Wizards', 'Pistons', 'Hornets', 'Cavaliers', 'Warriors'\n",
    "    ],\n",
    "    'HOME_TEAM_WINS': [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "app = dash.Dash(__name__)\n",
    "\n",
    "app.layout = html.Div([\n",
    "    html.H1(\"Home Team Wins Pie Chart\"),\n",
    "    dcc.Dropdown(\n",
    "        id='team-dropdown',\n",
    "        options=[{'label': team, 'value': team} for team in df['Home Team'].unique()],\n",
    "        value=df['Home Team'].iloc[0]\n",
    "    ),\n",
    "    dcc.Graph(id='pie-chart')\n",
    "])\n",
    "\n",
    "@app.callback(\n",
    "    Output('pie-chart', 'figure'),\n",
    "    [Input('team-dropdown', 'value')]\n",
    ")\n",
    "def update_pie_chart(selected_team):\n",
    "    filtered_df = df[df['Home Team'] == selected_team]\n",
    "    win_count = filtered_df['HOME_TEAM_WINS'].sum()\n",
    "    loss_count = len(filtered_df) - win_count\n",
    "\n",
    "    fig = px.pie(\n",
    "        values=[win_count, loss_count],\n",
    "        names=['Wins', 'Losses'],\n",
    "        title=f'Wins vs. Losses for {selected_team}'\n",
    "    )\n",
    "\n",
    "    return fig\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d37b6596",
   "metadata": {},
   "outputs": [],
   "source": [
    "import subprocess\n",
    "\n",
    "# Install Dash using pip\n",
    "try:\n",
    "    subprocess.check_call(['pip', 'install', 'dash'])\n",
    "    subprocess.check_call(['pip', 'install', 'dash-core-components'])\n",
    "    subprocess.check_call(['pip', 'install', 'dash-html-components'])\n",
    "except Exception as e:\n",
    "    print(f\"An error occurred during installation: {str(e)}\")\n",
    "\n",
    "# Import the necessary libraries\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "import dash\n",
    "import dash_core_components as dcc\n",
    "import dash_html_components as html\n",
    "from dash.dependencies import Input, Output\n",
    "\n",
    "# Sample data (replace this with your actual data)\n",
    "data = {\n",
    "    'Home Team': [\n",
    "        'Hawks', 'Celtics', 'Pelicans', 'Bulls', 'Mavericks', 'Nuggets', 'Rockets', 'Clippers', 'Lakers', 'Heat',\n",
    "        'Bucks', 'Timberwolves', 'Nets', 'Knicks', 'Magic', 'Pacers', '76ers', 'Suns', 'Trail Blazers', 'Kings',\n",
    "        'Spurs', 'Thunder', 'Raptors', 'Jazz', 'Grizzlies', 'Wizards', 'Pistons', 'Hornets', 'Cavaliers', 'Warriors'\n",
    "    ],\n",
    "    'HOME_TEAM_WINS': [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "app = dash.Dash(__name__)\n",
    "\n",
    "app.layout = html.Div([\n",
    "    html.H1(\"Home Team Wins Pie Chart\"),\n",
    "    dcc.Dropdown(\n",
    "        id='team-dropdown',\n",
    "        options=[{'label': team, 'value': team} for team in df['Home Team'].unique()],\n",
    "        value=df['Home Team'].iloc[0]\n",
    "    ),\n",
    "    dcc.Graph(id='pie-chart')\n",
    "])\n",
    "\n",
    "@app.callback(\n",
    "    Output('pie-chart', 'figure'),\n",
    "    [Input('team-dropdown', 'value')]\n",
    ")\n",
    "def update_pie_chart(selected_team):\n",
    "    filtered_df = df[df['Home Team'] == selected_team]\n",
    "    win_count = filtered_df['HOME_TEAM_WINS'].sum()\n",
    "    loss_count = len(filtered_df) - win_count\n",
    "\n",
    "    fig = px.pie(\n",
    "        values=[win_count, loss_count],\n",
    "        names=['Wins', 'Losses'],\n",
    "        title=f'Wins vs. Losses for {selected_team}'\n",
    "    )\n",
    "\n",
    "    return fig\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "20e927e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import streamlit as st\n",
    "import plotly.express as px\n",
    "\n",
    "# Load your CSV data into a DataFrame (adjust the file path)\n",
    "file_path = r\"C:\\Users\\sr48\\OneDrive - American University of Beirut\\Desktop\\Courses\\MSBA 325\\Assignment 2\\Games.csv\"\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "# Create a Streamlit app\n",
    "st.title(\"NBA Team Wins and Losses\")\n",
    "\n",
    "# Create a dropdown to select the team\n",
    "selected_team = st.selectbox(\"Select Home Team\", df['Home Team'].unique(), key=\"home_team_select\")\n",
    "\n",
    "# Filter the DataFrame based on the selected team\n",
    "filtered_df = df[df['Home Team'] == selected_team]\n",
    "\n",
    "# Calculate the number of wins and losses\n",
    "num_wins = filtered_df['HOME_TEAM_WINS'].sum()\n",
    "num_losses = len(filtered_df) - num_wins\n",
    "\n",
    "# Create a Plotly pie chart\n",
    "fig = px.pie(\n",
    "    names=[\"Wins\", \"Losses\"],\n",
    "    values=[num_wins, num_losses],\n",
    "    title=f\"Win-Loss Distribution for {selected_team}\",\n",
    ")\n",
    "\n",
    "# Display the pie chart\n",
    "st.plotly_chart(fig)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2cfe087d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Interactive Scatter Plot\n",
    "st.header(\"Interactive Scatter Plot\")\n",
    "x_column = st.selectbox(\"Select X-axis data\", df.select_dtypes(include=[float, int]).columns)\n",
    "y_column = st.selectbox(\"Select Y-axis data\", df.select_dtypes(include=[float, int]).columns)\n",
    "\n",
    "fig = px.scatter(df, x=x_column, y=y_column, title=f\"{x_column} vs {y_column}\")\n",
    "st.plotly_chart(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5d17f58d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DeltaGenerator()"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import plotly.express as px\n",
    "import streamlit as st\n",
    "\n",
    "# Load the dataset\n",
    "data_path = r\"C:\\Users\\sr48\\OneDrive - American University of Beirut\\Desktop\\Courses\\MSBA 325\\Assignment 2\\Games.csv\"\n",
    "df = pd.read_csv(data_path)\n",
    "\n",
    "# Create a dropdown list for selecting a team\n",
    "st.header(\"Select a Team to Highlight on the Map\")\n",
    "selected_team = st.selectbox(\"Select a team from the Home Team column:\", df['Home Team'].unique())\n",
    "\n",
    "# Filter the dataset based on the selected team and outcome\n",
    "filtered_df = df[(df['Home Team'] == selected_team) & (df['HOME_TEAM_WINS'] == 1)]\n",
    "\n",
    "# Create a map\n",
    "st.header(\"USA Map with Highlighted Team\")\n",
    "fig = px.scatter_geo(\n",
    "    filtered_df,\n",
    "    locations=\"Geographic conference_home\",\n",
    "    locationmode=\"USA-states\",\n",
    "    color=\"HOME_TEAM_WINS\",\n",
    "    hover_name=\"Home Team\",\n",
    "    scope=\"usa\",\n",
    "    title=f\"Games Won by {selected_team}\",\n",
    "    color_discrete_map={1: 'blue', 0: 'red'}\n",
    ")\n",
    "\n",
    "fig.update_geos(projection_type=\"albers usa\")\n",
    "st.plotly_chart(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8b2360d4",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unexpected EOF while parsing (450701649.py, line 37)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"C:\\Users\\sr48\\AppData\\Local\\Temp\\ipykernel_13440\\450701649.py\"\u001b[1;36m, line \u001b[1;32m37\u001b[0m\n\u001b[1;33m    st.plotly_chart(fig\u001b[0m\n\u001b[1;37m                       ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m unexpected EOF while parsing\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import plotly.express as px\n",
    "import streamlit as st\n",
    "\n",
    "# Load the dataset\n",
    "data_path = r\"C:\\Users\\sr48\\OneDrive - American University of Beirut\\Desktop\\Courses\\MSBA 325\\Assignment 2\\Games.csv\"\n",
    "df = pd.read_csv(data_path)\n",
    "\n",
    "# Create a select_slider for selecting the columns to visualize\n",
    "st.sidebar.header(\"Select Columns for Visualization\")\n",
    "selected_columns = st.sidebar.select_slider(\n",
    "    \"Select Columns\",\n",
    "    options=df.columns[4:-1],  # Exclude non-numeric and outcome columns\n",
    "    value=[\"Percent of Team's Points_home\", 'Field Goal Percentage_home']\n",
    ")\n",
    "\n",
    "# Create a scatter plot\n",
    "st.header(\"Interactive Scatter Plot\")\n",
    "x_column = st.selectbox(\"Select X-axis data\", df.select_dtypes(include=[float, int]).columns)\n",
    "y_column = st.selectbox(\"Select Y-axis data\", df.select_dtypes(include=[float, int]).columns)\n",
    "\n",
    "# Filter the dataset based on the selected columns\n",
    "filtered_df = df[['Home Team', 'HOME_TEAM_WINS'] + selected_columns]\n",
    "\n",
    "# Create a scatter plot\n",
    "fig = px.scatter(\n",
    "    filtered_df,\n",
    "    x=x_column,\n",
    "    y=y_column,\n",
    "    color='HOME_TEAM_WINS',\n",
    "    hover_name='Home Team',\n",
    "    title=f\"{x_column} vs {y_column}\",\n",
    "    labels={x_column: x_column, y_column: y_column},\n",
    ")\n",
    "\n",
    "st.plotly_chart(fig\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "447dce00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DeltaGenerator()"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import plotly.express as px\n",
    "import streamlit as st\n",
    "\n",
    "# Load the dataset\n",
    "data_path = r\"C:\\Users\\sr48\\OneDrive - American University of Beirut\\Desktop\\Courses\\MSBA 325\\Assignment 2\\Games.csv\"\n",
    "df = pd.read_csv(data_path)\n",
    "\n",
    "# Sidebar: Select a team and outcome for the first visualization\n",
    "st.sidebar.header(\"First Visualization\")\n",
    "selected_team = st.sidebar.selectbox(\"Select a team from Home Team column:\", df['Home Team'].unique())\n",
    "outcome = st.sidebar.radio(\"Select outcome:\", [\"Win\", \"Loss\"])\n",
    "filtered_df = df[(df['Home Team'] == selected_team) & (df['HOME_TEAM_WINS'] == (1 if outcome == \"Win\" else 0))]\n",
    "\n",
    "# First Visualization: Histogram of Wins by Year\n",
    "st.header(\"First Visualization: Histogram of Wins by Year\")\n",
    "st.write(f\"Team: {selected_team}, Outcome: {outcome}\")\n",
    "year_counts = filtered_df['SEASON'].value_counts()\n",
    "fig = px.bar(year_counts, x=year_counts.index, y=year_counts.values, labels={'x': 'Year', 'y': 'Number of Wins'})\n",
    "st.plotly_chart(fig)\n",
    "\n",
    "# Sidebar: Select a team and year for the second visualization\n",
    "st.sidebar.header(\"Second Visualization\")\n",
    "selected_team_for_pie = st.sidebar.selectbox(\"Select a team for the pie chart:\", df['Home Team'].unique())\n",
    "selected_year = st.sidebar.select_slider(\"Select a year:\", [2005, 2019, 2022])\n",
    "\n",
    "# Second Visualization: Pie Chart of Selected Team's Statistics for the Selected Year\n",
    "st.header(\"Second Visualization: Pie Chart of Selected Team's Statistics\")\n",
    "st.write(f\"Team: {selected_team_for_pie}, Year: {selected_year}\")\n",
    "\n",
    "# Get the row for the selected team and year\n",
    "selected_row = df[(df['Home Team'] == selected_team_for_pie) & (df['SEASON'] == selected_year)]\n",
    "\n",
    "# Define the statistics columns\n",
    "stats_columns = [col for col in selected_row.columns if col.endswith(\"_home\")]\n",
    "\n",
    "# Extract the corresponding values for the selected columns\n",
    "stats_values = [selected_row[column].values[0] for column in stats_columns]\n",
    "\n",
    "# Create a pie chart\n",
    "fig = px.pie(\n",
    "    values=stats_values,\n",
    "    names=stats_columns,\n",
    "    title=f\"Statistics for {selected_team_for_pie} in {selected_year}\",\n",
    "    labels={'names': 'Statistic'},\n",
    ")\n",
    "st.plotly_chart(fig)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "77203099",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "module 'streamlit' has no attribute 'init'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_11044\\1912689356.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      9\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     10\u001b[0m \u001b[1;31m# Create a Streamlit app in Jupyter Notebook\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 11\u001b[1;33m \u001b[0mst\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0minit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     12\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     13\u001b[0m \u001b[1;31m# Sidebar: Select a team and year\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: module 'streamlit' has no attribute 'init'"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import plotly.express as px\n",
    "import streamlit as st\n",
    "\n",
    "# Load the dataset\n",
    "data_path = r\"C:\\Users\\sr48\\OneDrive - American University of Beirut\\Desktop\\Courses\\MSBA 325\\Assignment 2\\Games.csv\"\n",
    "df = pd.read_csv(data_path)\n",
    "\n",
    "# Create a Streamlit app in Jupyter Notebook\n",
    "st.init()\n",
    "\n",
    "# Sidebar: Select a team and year\n",
    "selected_team = st.sidebar.selectbox(\"Select a team from Home Team column:\", df['Home Team'].unique())\n",
    "selected_year = st.sidebar.slider(\"Select a year:\", min_value=min(df['SEASON']), max_value=max(df['SEASON']))\n",
    "\n",
    "# Filter the dataset based on the selected team and year\n",
    "filtered_df = df[(df['Home Team'] == selected_team) & (df['SEASON'] == selected_year)]\n",
    "\n",
    "# Calculate the number of wins and losses\n",
    "num_wins = filtered_df[filtered_df['HOME_TEAM_WINS'] == 1].shape[0]\n",
    "num_losses = filtered_df[filtered_df['HOME_TEAM_WINS'] == 0].shape[0]\n",
    "\n",
    "# Create a pie chart\n",
    "st.header(f\"Interactive Pie Chart for {selected_team} in {selected_year}\")\n",
    "st.write(f\"Team: {selected_team}, Year: {selected_year}\")\n",
    "st.write(f\"Number of Wins: {num_wins}, Number of Losses: {num_losses}\")\n",
    "\n",
    "fig = px.pie(\n",
    "    values=[num_wins, num_losses],\n",
    "    names=[\"Wins\", \"Losses\"],\n",
    "    title=f\"Win-Loss Distribution for {selected_team} in {selected_year}\",\n",
    ")\n",
    "st.plotly_chart(fig)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6653e67f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
